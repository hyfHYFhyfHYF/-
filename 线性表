#include <iostream>
#include <stdlib.h> 
#include <stdio.h>
#define ERROR 0
#define OK 1 
typedef float ElemType;
typedef int  Status;
//定义一个结构体模板
typedef struct LNode{
	ElemType data;
	struct LNode *next;
}LNode,*LinkList;
//函数声明
Status InitList(LinkList &L);//构造一个空的链表 
Status ListInsert_L(LinkList &L,Status i,ElemType e);//在链表插入一个元素
Status ListDelete_L(LinkList L,Status i,ElemType &e);//删除链表中的一个元素
Status GetElem_L(LinkList L,int i,ElemType &e);//查找元素 
void MergeList_L(LinkList &La,LinkList &Lb,LinkList &Lc);//合并链表
void PrintList(LinkList L);//输出
//构建 
Status InitList(LinkList &L)
{
	L->next=NULL; 
}
//插入 
Status ListInsert_L(LinkList &L,Status i,ElemType e)
{
	LinkList s,p=L;
	Status j=0;
	while(p&&j<i-1)//寻找第i个元素
	{
	 p=p->next; 
	 j++;
	}
	if(!p||j>i-1)
	{
		return ERROR;
	} 
	else
	{
		s=(LinkList)malloc(sizeof(LNode));
		s->data=e;
		s->next=p->next;
		p->next=s;
		return OK;
	}
}
//删除
Status ListDelete_L(LinkList L,Status i,ElemType &e)
{
	LinkList q,p=L;
	int j=0;
	while(p&&j<i-1)//寻找第i个元素
	{
	 p=p->next; 
	 j++;
	}
	if(!(p->next)&&j<i-1)
	{
		return ERROR;
	}
	else
	{
		q=p->next;
		e=q->data;
		free(q);
		return OK;
	}
}
//查找
Status GetElem_L(LinkList L,int i,ElemType &e)
{
	LinkList p;
	int j=1;
	p=L->next;
	while(p&&j<i)
	{
         p=p->next; 
	 	 j++;
	}
	if(!p||j>i)
	{
		return ERROR;
	}
	else
	{
		e=p->data;
		return OK;
	}
} 
//输出
void PrintList(LinkList L)
{
	LinkList p;
	p=L->next;
	while(p)
	{
		printf("%f ",p->data);
		p=p->next;
	}
	printf("\n");
}
//合并
void MergeList_L(LinkList &La,LinkList &Lb,LinkList &Lc)
{
	LinkList pa,pb,pc;
	pa=La->next;
	pb=Lb->next;
	pc=Lc->next;
	while(pa&&pb)
	{
		if(pa->data <= pb->data)
		{
			pc->next=pa;
			pc=pa;
			pa=pa->next;
		}
		else
		{
			pc->next=pb;
			pc=pb;
			pb=pb->next;
		}
		pc->next=pa?pa:pb;//插入剩余部分 
		free(Lb);
	}
} 
//主函数
int main()
{
	LinkList L,La,Lb,Lc;
	LinkList p,q=L=(LinkList)malloc(sizeof(LNode));
	Status i,n,x,m;
	float e;
	printf("1.创建非空链表L\n2.删除链表中的某个元素\n3.在链表中插入元素\n4.查找链表中的元素\n5.将链表输出\n6.创建LaLb并将其合并\n0.退出程序");
	printf("请输入要执行的程序:\n");
	scanf("%d",&x);
	while(x)
	{
		switch(x)
		{
			case 1:{
				printf("请输入要为链表附几个值:\n");
   				   scanf("%d",&n);
   				   printf("请输入这%d个值:\n",n);
   				   q=L=(LinkList)malloc(sizeof(LNode));
   				   L->next=NULL;
   				   for(i=1;i<=n;i++)
   				   {
   				      p=(LinkList)malloc(sizeof(LNode));
			  		  scanf("%d",&p->data);
			  		  q->next=p;
			  		  q=p;   			
				   }
				break;
			}
            case 2:{
            	printf("请输入要删除第几个元素:\n");
            	scanf("%d",&i);
            	ListDelete_L(L,i,e);
            	PrintList(L);
            	printf("删除的元素为%d",e);
            	break;
            }
            case 4:{
            	printf("请输入要查找第几个元素:\n");
            	scanf("%d",&i);
            	GetElem_L(L,i,e);
            	printf("找到的元素为%d\n",e);
            	break;
            }
            case 5:{
            	printf("输出链表L为:\n");
            	PrintList(L);
				break;
			}
			case 6:{
				printf("为链表La赋n个递增值:\n请输入n的值:");
				scanf("%d",&n);
				printf("请输入这%d个值:\n",n);
   				    q=La=(LinkList)malloc(sizeof(LNode));
   				    La->next=NULL;
   				    for(i=1;i<=n;i++)
   				    {
   				        p=(LinkList)malloc(sizeof(LNode));
			  		    scanf("%d",&p->data);
			  		    q->next=p;
			  		    q=p;   			
				   }
		    	printf("为链表Lb赋n个递增值:\n请输入m的值:");
				scanf("%d",&m);
				printf("请输入这%d个值:\n",n);
   				    q=Lb=(LinkList)malloc(sizeof(LNode));
   				    Lb->next=NULL;
   				    for(i=1;i<=m;i++)
   				    {
   				        p=(LinkList)malloc(sizeof(LNode));
			  		    scanf("%d",&p->data);
			  		    q->next=p;
			  		    q=p;   			
				   }
				MergeList_L(La,Lb,Lc);
				PrintList(Lc);
				break;
			}
			case 0:{
				continue;
			}
		}
		printf("请输入要执行的程序:\n");
		scanf("%d",&x);
	}
	return 0;
} 
